#pragma once

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <string>
#include <cmath>
#include <vector>

using namespace std;

class Histogram
{
    // Через неможливість зберігати дані для статстичної обробки, в класі зберігається інформація 
    // про максимальне та мінімальне значення даних. Замість даних зберігаємо лише частоти 
    // у відповідних стовпцях гістограми, кількість стовпців фіксована.
    // Для статистичного аналізу використовуємо встановлені приблизні значення для кожного стовпця:
    // ( праве (максимальне для стовпця значення) + ліве (мінімальне) ) / 2   
    //  ---  для великих масивів даних достатньо коректно відображають реальні експерементальні дані
    // Варіанти задання гістограми: 
    // а) функція input() - частоти вказуються явно
    // б) функції setMax, setMin, setM - частоти по замовчуванню "0"  
    // перезбачено зберігання в бінарний файл та зчитування з бінарного файлу

    double min_hist_;     // максимальне значення даних
    double max_hist_;     // мінімальне значення даних
    unsigned M;           // кількість стовпців
    unsigned* frequency;  // замість даних - частоти у відповідних стовпцях
    double* aprox_values; // встановлені приблизні значення для кожного стовпця

public:

    Histogram() = default;

    void input(); // введення з консолі даних про мінімум, максимум, кількість стовпців та частоти

    void print();  // виведення інформації про гістограму

    void setMax(double m);  // встановити максимальне значення даних

    void setMin(double m);  // встановити мінімальне значення даних

    void setM(unsigned m);  // встановити кількість стовпців, частоти по замовчуванню "0"

    void setAprox_values();  // встановити приблизні значення для кожного стовпця

    void addNumber_1(double x); // додати число. якщо число виходить за межі мін та макс - не додавати

    void addNumber_2(double x); // додати число. 
                                // якщо число виходить за межі мін та макс - додати в крайні інтервали

    void addbatch_1(const vector<double>& data);
    // додати масив чисел.
    // якщо число виходить за межі мін та макс - не додавати
    // використовує функцію addNumber_1

    void addbatch_2(const vector<double>& data); 
    // додати масив чисел.
    // якщо число виходить за межі мін та макс - додати в крайні інтервали
    // використовує функцію addNumber_2

    void InputFromBinFile(char* filename, int way_to_add); 
    // зчитує масив чисел (або одне число) з бінарного файлу
    // допустимі значення параметра way_to_add "1" або "2" 
    // додати масив чисел.
    // використовує функцію addbatch_1 або addbatch_2 (в залежності від параметра way_to_add)

    void InputFromTxtFile(char* filename, int way_to_add);
    // зчитує масив чисел (або одне число) з текстового файлу
    // допустимі значення параметра way_to_add "1" або "2" 
    // додати масив чисел.
    // використовує функцію addbatch_1 або addbatch_2 (в залежності від параметра way_to_add)

    // ANALISE

    unsigned num() const;  // повертає загальну кількість елементів гістограми

    unsigned numHist(unsigned i) const;   // повертає кількість елементів гістограми для стовпця "і"

    double max() const; // повертає максимальне значення гістограми

    double min() const; // повертає мінімальне значення гістограми

    double mean();     // повертає середнє значення гістограми

    double median();  // повертає медіону гістограми

    double moda();   // повертає моду гістограми

    double range();   // повертає розмах даних гістограми
      
    double max_value_error(); // повертає максимальну похибку при використанні встановлених середніх значень стовпця 

    double variance();  // повертає дисперсію даних гістограми

    double dev();      // повертає середньоквадратичне відхилення даних гістограми

    double asymmetry();  // повертає значення асиметрії даних гістограми

    double excess_kurtosis();  // повертає значення ексцесу даних гістограми

};

void save_histogram(const Histogram& hist, char* fname);  // збереження гітограми в бінарний файл

Histogram import_histogram(char* fname);    // зчитування гітограми з бінарного файлу

void save_test_bin_data(vector<double>& data, char* fname); // збереження вектора даних в бінарний файл


